def open_main_window4():
    welcome_window.destroy()
    main_windows4()

def main_windows4():


    global nom_fichier_entree, nom_fichier_sortie
    nom_fichier_entree = ""
    nom_fichier_sortie = ""
    
    def check_password():
        pass
    
    def ouvrir_terminal():
        global nom_fichier_entree, nom_fichier_sortie
        chemin_dossier = r"C:\Users\Administrateur\Desktop\Johntheripper\run"
        process = subprocess.Popen(["cmd.exe", "/K", "cd", chemin_dossier], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        commande_rar2john = f'rar2john.exe "{nom_fichier_entree}" > "{nom_fichier_sortie}"'
        commande_john = f'john.exe "{nom_fichier_entree}" "{nom_fichier_sortie}"'
        commandes = [commande_rar2john, commande_john]
        for commande in commandes:
            process.stdin.write(commande.encode('utf-8') + b'\n')
            process.stdin.flush()
        stdout, stderr = process.communicate()
        if stdout:
            texte_terminal.insert(tk.END, stdout.decode('utf-8'))
        if stderr:
            texte_terminal.insert(tk.END, stderr.decode('utf-8'))
    
    def demander_nom_fichier_entree():
        global nom_fichier_entree
        nom_fichier_entree = entree_nom_fichier_entree.get()
        texte_terminal.insert(tk.END, f"Fichier d'entrée sélectionné : {nom_fichier_entree}\n")
    
    def demander_nom_fichier_sortie():
        global nom_fichier_sortie
        nom_fichier_sortie = entree_nom_fichier_sortie.get()
        texte_terminal.insert(tk.END, f"Fichier de sortie sélectionné : {nom_fichier_sortie}\n")

    def generate_pdf(result):
        filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if filename:
            c = canvas.Canvas(filename, pagesize=letter)
            c.drawString(100, 750, "Nmap Report")
            c.drawString(100, 730, "-" * 50)
            c.drawString(100, 700, "Scan Result:")
            y = 680
            lines = result.split("\n")
            page_number = 1
            for line in lines:
                if y < 100:
                    c.showPage()
                    c.drawString(100, 750, f"Nmap Report (Page {page_number})")
                    c.drawString(100, 730, "-" * 50)
                    c.drawString(100, 700, "Scan Result:")
                    y = 680
                    page_number += 1
                text_width = c.stringWidth(line)
                x = (letter[0] - text_width) / 2  # Calcul de la position x pour centrer le texte
                c.drawString(x, y, line)
                y -= 15
            c.save()

    def generate_pdf_handler():
        result = texte_terminal.get("1.0", tk.END)
        generate_pdf(result)

    def choisir_format(fichier_format):
        global format_selectionne
        format_selectionne = fichier_format

    # Création de la fenêtre principale
    fenetre = tk.Tk()
    fenetre.title("Interface pour le Hack")

    # Création de l'étiquette et de l'entrée de texte pour le nom du fichier d'entrée
    etiquette_nom_fichier_entree = tk.Label(fenetre, text="Nom du fichier à hacker:")
    etiquette_nom_fichier_entree.pack()

    entree_nom_fichier_entree = tk.Entry(fenetre)
    entree_nom_fichier_entree.pack()

    # Création de la bouton pour demander le nom du fichier d'entrée
    bouton_selection_entree = tk.Button(fenetre, text="Valider", command=demander_nom_fichier_entree)
    bouton_selection_entree.pack()

    # Création de l'étiquette et de l'entrée de texte pour le nom du fichier de sortie
    etiquette_nom_fichier_sortie = tk.Label(fenetre, text="Nom du fichier pour stocker le hash:")
    etiquette_nom_fichier_sortie.pack()

    entree_nom_fichier_sortie = tk.Entry(fenetre)
    entree_nom_fichier_sortie.pack()

    # Création de la bouton pour demander le nom du fichier de sortie
    bouton_selection_sortie = tk.Button(fenetre, text="Valider", command=demander_nom_fichier_sortie)
    bouton_selection_sortie.pack()

    # Menu déroulant pour choisir le format du fichier
    format_selectionne = tk.StringVar(fenetre)
    format_selectionne.set("RAR")  # Valeur par défaut

    menu_deroulant = tk.OptionMenu(fenetre, format_selectionne, "RAR", "ZIP")
    menu_deroulant.pack()

    # Création de la zone de texte pour afficher le résultat du terminal
    texte_terminal = tk.Text(fenetre, height=20, width=100)
    texte_terminal.pack()

    # Création du bouton pour ouvrir le terminal
    bouton_terminal = tk.Button(fenetre, text="Découvrir le Mot de Passe", command=ouvrir_terminal)
    bouton_terminal.pack()

    # Création du bouton pour générer le PDF
    generate_pdf_button = tk.Button(fenetre, text="Générer PDF", command=generate_pdf_handler)
    generate_pdf_button.pack(pady=5)

    return_button = tk.Button(fenetre, text="Retour à l'accueil", command=open_welcome_window, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    return_button.pack(pady=5)

    fenetre.mainloop()