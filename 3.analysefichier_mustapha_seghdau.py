def open_main_window3():
    welcome_window.destroy()
    main_window3()

def main_window3():


    root = Tk()
    root.withdraw()  

    
    drive = filedialog.askdirectory(title="Choisir le répertoire à analyser")

    log_file = r"C:\file_analyzer.log"  
    malware_hash_file = r"C:\malware_hashes.txt" 

    if not os.path.exists(log_file):
        with open(log_file, 'w'):
            pass

    def get_file_hash_md5(file_path):
        """Retourne le hachage MD5 du fichier spécifié."""
        with open(file_path, 'rb') as f:
            md5 = hashlib.md5()
            while chunk := f.read(4096):
                md5.update(chunk)
        return md5.hexdigest()

    def check_malware_hash(md5):
        """Vérifie si le hachage MD5 est présent dans la liste des hachages de logiciels malveillants."""
        with open(malware_hash_file, 'r') as f:
            if re.search(md5, f.read()):
                return True
        return False

    for root, dirs, files in os.walk(drive):
        for file in files:
            counter = 0
            file_path = os.path.join(root, file)

            try:
                # Exécute la commande PowerShell pour obtenir la signature de l'authenticode
                subprocess.run(["powershell", "-Command", "(Get-AuthenticodeSignature '{}').SignerCertificate".format(file_path)], check=True)
            except subprocess.CalledProcessError:
                counter += 1

            # Vérifie si l'extension du fichier est potentiellement malveillante
            extensions = [".bat", ".cmd", ".com", ".dll", ".exe", ".js", ".jse", ".lnk", ".msc", ".msi", ".msp",
                        ".mst", ".pif", ".reg", ".scr", ".vbs", ".vbe", ".wsc", ".wsf", ".wsh"]
            file_extension = os.path.splitext(file_path)[1]
            if file_extension.lower() in extensions:
                counter += 1

            # Vérifie les attributs du fichier
            file_attributes = os.stat(file_path).st_file_attributes
            if file_attributes & 2 != 0:
                counter += 1

            # Vérifie si le fichier est considéré comme malveillant en comparant son hachage MD5
            md5 = get_file_hash_md5(file_path)
            is_malware = check_malware_hash(md5)
            if is_malware:
                counter += 1

            # Affiche le résultat de l'analyse
            if counter >= 3:
                print("Le fichier {} est potentiellement malveillant.".format(file_path))
                with open(log_file, 'a') as f:
                    f.write("Le fichier {} est potentiellement malveillant.\n".format(file_path))
            else:
                print("Le fichier {} est OK.".format(file_path))

    return_button = tk.Button(root, text="Retour à l'accueil", command=open_welcome_window, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    return_button.pack(pady=5)    

    root.mainloop()