
def main_window():
    def scan(ip, scan_type):
        start_loading()
        try:
            if scan_type == "Simple":
                result = subprocess.run(['nmap', ip], capture_output=True, text=True).stdout
            elif scan_type == "OS":
                result = subprocess.run(['nmap', '-O', ip], capture_output=True, text=True).stdout
            elif scan_type == "Version":
                result = subprocess.run(['nmap', '-sV', ip], capture_output=True, text=True).stdout
            elif scan_type == "TCP":
                result = subprocess.run(['nmap', '-sT', ip], capture_output=True, text=True).stdout
            elif scan_type == "Scan + Vulnérabilité":
                result = subprocess.run(['nmap', '--script', 'vuln', '--script-args', 'vulns.showall', ip], capture_output=True, text=True).stdout
            else:
                result = "Invalid scan type"
        except Exception as e:
            result = f"Error: {str(e)}"
        stop_loading()
        return result

    def generate_pdf(result):
        filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if filename:
            c = canvas.Canvas(filename, pagesize=letter)
            c.drawString(100, 750, "Nmap Report")
            c.drawString(100, 730, "-" * 50)
            c.drawString(100, 700, "Scan Result:")
            y = 680
            for line in result.split("\n"):
                c.drawString(100, y, line)
                y -= 15
            c.save()

    def action_scan():
        ip_address = ip_entry.get()
        selected_scan = scan_type_var.get()
        result = scan(ip_address, selected_scan)
        result_text.set(result)

    def print_report():
        generate_pdf(result_text.get())

    def reset_window():
        ip_entry.delete(0, tk.END)
        result_text.set("")
        scan_type_var.set("")

    def start_loading():
        loading_label.config(text="Loading...")
        loading_progress.start()

    def stop_loading():
        loading_label.config(text="")
        loading_progress.stop()

    root = tk.Tk()
    root.title("Nmap Scanner")
    root.configure(bg='#1e1e1e')  
    root.attributes("-alpha", 0.95)  

    frame = tk.Frame(root, bg='#1e1e1e')
    frame.pack(padx=20, pady=20)

    result_text = tk.StringVar()
    scan_type_var = tk.StringVar()

    ip_label = tk.Label(frame, text="Enter IP Address:", bg='#1e1e1e', fg='#ffbb00', font=('Helvetica', 12, 'bold'))
    ip_label.grid(row=0, column=0, padx=(0, 20), pady=(0, 10))

    ip_entry = tk.Entry(frame, bg='#333333', fg='#ffffff', font=('Helvetica', 12))
    ip_entry.grid(row=0, column=1, padx=(0, 20), pady=(0, 10))

    scan_type_label = tk.Label(frame, text="Select Scan Type:", bg='#1e1e1e', fg='#ffbb00', font=('Helvetica', 12, 'bold'))
    scan_type_label.grid(row=1, column=0, padx=(0, 20), pady=(0, 10))

    scan_type_options = ["Simple", "OS", "Version", "TCP", "Scan + Vulnérabilité"]
    scan_type_menu = tk.OptionMenu(frame, scan_type_var, *scan_type_options)
    scan_type_menu.config(bg='#333333', fg='#ffffff', font=('Helvetica', 12))
    scan_type_menu.grid(row=1, column=1, padx=(0, 20), pady=(0, 10))

    scan_button = tk.Button(frame, text="Scan", command=action_scan, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    scan_button.grid(row=2, column=0, columnspan=2, padx=(0, 20), pady=(0, 10))

    result_label = tk.Label(frame, textvariable=result_text, fg="#00bfff", justify="left", anchor="w", wraplength=400, bg='#1e1e1e', font=('Helvetica', 10))
    result_label.grid(row=3, column=0, padx=(0, 20), pady=(0, 10), columnspan=2, sticky="w")

    reset_button = tk.Button(frame, text="Reset", command=reset_window, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    reset_button.grid(row=4, column=0, padx=(50, 20), pady=(0, 10))

    print_button = tk.Button(frame, text="Print Report", command=print_report, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    print_button.grid(row=4, column=1, padx=(0, 20), pady=(0, 10))

    loading_progress = ttk.Progressbar(frame, mode='indeterminate', length=200)
    loading_label = tk.Label(frame, text="", bg='#1e1e1e', fg='#ffbb00', font=('Helvetica', 12, 'bold'))
    loading_label.grid(row=5, column=0, columnspan=2, pady=(10, 0))

    return_button = tk.Button(frame, text="Retour à l'accueil", command=open_welcome_window, width=15, height=2, bg='#87ceeb', fg='#1e1e1e', font=('Helvetica', 12, 'bold'))
    return_button.grid(row=6, column=0, columnspan=2, padx=(0, 20), pady=(0, 10))

    
    root.mainloop()