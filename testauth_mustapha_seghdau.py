def open_main_window6():
    main_windows6()

def main_windows6():
    def ssh_connect():
        username = username_entry.get()
        password = password_entry.get()
        ip_address = ip_entry.get()

        # Vérification de la robustesse du mot de passe
        password_is_strong, password_message = check_password_strength(password)

        # Affichage du résultat de la vérification du mot de passe
        output_text.insert(tk.END, password_message + "\n")

        # Création de la connexion SSH
        try:
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect(hostname=ip_address, username=username, password=password)
            output_text.insert(tk.END, "Connexion SSH réussie à {}\n".format(ip_address))
            
            # Exemple d'exécution de commande
            stdin, stdout, stderr = ssh_client.exec_command("ls")
            output = stdout.read().decode()
            output_text.insert(tk.END, "Résultat de la commande 'ls':\n{}\n".format(output))
            
            ssh_client.close()
        except paramiko.AuthenticationException:
            output_text.insert(tk.END, "Échec de l'authentification SSH. Veuillez vérifier vos informations.\n")
        except paramiko.SSHException as e:
            output_text.insert(tk.END, "Erreur SSH: {}\n".format(e))
        except Exception as e:
            output_text.insert(tk.END, "Erreur inattendue: {}\n".format(e))

    def check_password_strength(password):
        # Vérifie la longueur du mot de passe
        if len(password) < 8:
            return False, "Le mot de passe n'est pas sécurisé car il ne contient pas au moins 8 caractères."

        # Vérifie la présence d'au moins une majuscule
        if not any(char.isupper() for char in password):
            return False, "Le mot de passe n'est pas sécurisé car il ne contient pas au moins une lettre majuscule."

        # Vérifie la présence d'au moins un chiffre
        if not any(char.isdigit() for char in password):
            return False, "Le mot de passe n'est pas sécurisé car il ne contient pas au moins un chiffre."

        # Vérifie la présence d'au moins un caractère spécial
        if not re.search("[!@#$%^&*()-_+=]", password):
            return False, "Le mot de passe n'est pas sécurisé car il ne contient pas au moins un caractère spécial."

        # Le mot de passe a passé tous les tests de robustesse
        return True, "Le mot de passe est suffisamment robuste."

    # Création de la fenêtre principale
    root = tk.Tk()
    root.title("Test d'authentification ssh")

    # Cadre pour les entrées
    input_frame = tk.Frame(root)
    input_frame.pack(padx=10, pady=10)

    # Labels et Entrées pour le login, le mot de passe et l'adresse IP
    tk.Label(input_frame, text="Login:").grid(row=0, column=0, sticky="w")
    username_entry = tk.Entry(input_frame)
    username_entry.grid(row=0, column=1)

    tk.Label(input_frame, text="Mot de passe:").grid(row=1, column=0, sticky="w")
    password_entry = tk.Entry(input_frame, show="*")
    password_entry.grid(row=1, column=1)

    tk.Label(input_frame, text="Adresse IP:").grid(row=2, column=0, sticky="w")
    ip_entry = tk.Entry(input_frame)
    ip_entry.grid(row=2, column=1)

    # Bouton de connexion SSH
    connect_button = tk.Button(root, text="Test d'authentification SSH", command=ssh_connect)
    connect_button.pack(pady=10)

    # Zone de texte pour afficher la sortie
    output_text = scrolledtext.ScrolledText(root, height=10, width=50)
    output_text.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    root.mainloop()
